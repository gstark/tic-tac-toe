require 'set'
require 'rake'
require 'rspec'
require 'rspec/core/rake_task'
require 'simplecov'
require_relative 'lib/tic-tac-toe'

RSpec::Core::RakeTask.new(:spec) do |t|
  t.rspec_opts = "--tag ~slow"
end

RSpec::Core::RakeTask.new(:spec_all)

RSpec::Core::RakeTask.new(:spec_coverage) do |t|
  t.rspec_opts = "--tag ~slow"

  SimpleCov.start
end


RSpec::Core::RakeTask.new(:spec_all_coverage) do |t|
  SimpleCov.start
end

desc "Generates piet scripts"
task :generates_piet_scripts do
  computer = UnbeatableTicTacToe.new(Game::COMPUTER)
  human    = PlaysAllPossibleMoves.new(Game::HUMAN)

  def output_script(filename, method_name, game)
    File.open(filename, "w") do |file|
      file.puts <<-EOF
      #{method_name}(board)
      {
        new_move=99;
      EOF

      game.results.sort_by { |move, boards| move }.each do |move, boards|
        boards = boards.uniq.map { |board| "(board == #{board})" }.join(" || ")
        file.puts "        if (#{boards}) { new_move = #{move}; }"
      end

      file.puts <<-EOF

        if (new_move == 99)
        {
          asm { @"No move available\\r\\n" }
          while (1)
          {
          }
        }

        return new_move;
      }
      EOF
    end
  end

  game = SavesResults.new(computer, human, 1)
  game.play
  output_script("../piet/goes_first.script", "get_computer_move_going_first", game)

  game = SavesResults.new(human, computer, 2)
  game.play
  output_script("../piet/goes_last.script", "get_computer_move_going_last", game)
end

desc "Generates yaml files"
task :generates_yaml_files do
  computer = UnbeatableTicTacToe.new(Game::COMPUTER)
  human    = PlaysAllPossibleMoves.new(Game::HUMAN)

  def output_yaml(file, game)
    File.write(file, game.results.to_yaml)
  end

  game = SavesResults.new(computer, human, 1)
  game.play
  output_yaml("goes_first.yml", game)

  game = SavesResults.new(human, computer, 2)
  game.play
  output_yaml("goes_last.yml", game)
end
