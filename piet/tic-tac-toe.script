main()
{
  asm { @"If you want to go first enter 1, otherwise 0\r\n" }
  human_first = 0;
  asm { inn in pop add }

  if (human_first == 0)
  {
    asm { @"I go first and I'm X\r\n" }
  }
  else
  {
    asm { @"I go second and I'm X\r\n" }
  }

  board = 0;
  exp = 0;

  while (1)
  {
    // Computer goes first
    if (human_first == 0)
    {
      asm { @"\r\n\r\n\r\n" }
      move = get_computer_move_going_first(board);

      asm { @"I move to: " }
      __outn(move);
      asm { @"\r\n\r\n" }

      exp = exponent(move);
      board = 2*exp + board;
      print_board(board);

      check_for_win(board);
    }
    else
    {
      print_board(board);
    }

    invalid_move = 1;
    while (invalid_move == 1)
    {
      asm { @"Move: " }
      // tricky way of getting an int.
      // pushes a zero on the stack
      // reads a number and the CR
      // then pops the CR and then
      // adds our zero and our number
      // putting them back on the stack
      // where 'new_move' used to be
      new_move = 0;
      asm { inn in pop add }

      move = new_move;
      exp = exponent(move);

      if (((board / exp) %3 != 0) || (move < 0) || (move > 8))
      {
        asm { @"ILLEGAL MOVE! Try again human!\r\n" }
      }
      else
      {
        invalid_move = 0;
      }
    }

    board = exp + board;

    // Computer goes last
    if (human_first == 1)
    {
      asm { @"\r\n\r\n\r\n" }
      move = get_computer_move_going_last(board);

      asm { @"I move to: " }
      __outn(move);
      asm { @"\r\n\r\n" }

      exp = exponent(move);
      board = 2*exp + board;

      check_for_win(board);
    }
  }
}

check_for_win(board)
{
  pos_0 = (board/exponent(0))%3;
  pos_1 = (board/exponent(1))%3;
  pos_2 = (board/exponent(2))%3;
  pos_3 = (board/exponent(3))%3;
  pos_4 = (board/exponent(4))%3;
  pos_5 = (board/exponent(5))%3;
  pos_6 = (board/exponent(6))%3;
  pos_7 = (board/exponent(7))%3;
  pos_8 = (board/exponent(8))%3;

  if ((pos_0 == 2 && pos_1 == 2 && pos_2 == 2) ||
      (pos_3 == 2 && pos_4 == 2 && pos_5 == 2) ||
      (pos_6 == 2 && pos_7 == 2 && pos_8 == 2) ||
      (pos_0 == 2 && pos_3 == 2 && pos_6 == 2) ||
      (pos_1 == 2 && pos_4 == 2 && pos_7 == 2) ||
      (pos_2 == 2 && pos_5 == 2 && pos_8 == 2) ||
      (pos_0 == 2 && pos_4 == 2 && pos_8 == 2) ||
      (pos_2 == 2 && pos_4 == 2 && pos_6 == 2))
  {
    asm { @"**** I WIN! ****\r\n\r\n" }
    print_board(board);
    while (1)
    {

    }
  }
}

print_board(board)
{
  print_piece((board/exponent(0))%3);
  print_piece((board/exponent(1))%3);
  print_piece((board/exponent(2))%3);
  asm { @"\r\n" }
  print_piece((board/exponent(3))%3);
  print_piece((board/exponent(4)%3));
  print_piece((board/exponent(5))%3);
  asm { @"\r\n" }
  print_piece((board/exponent(6))%3);
  print_piece((board/exponent(7))%3);
  print_piece((board/exponent(8))%3);
  asm { @"\r\n" }
}

print_piece(piece)
{
  if (piece == 0) { asm { @"." } }
  if (piece == 1) { asm { @"O" } }
  if (piece == 2) { asm { @"X" } }
}

exponent(position)
{
  exp = 1;
  for(i=0; i < position; i++)
  {
    exp = exp *3;
  }

  return exp;
}

