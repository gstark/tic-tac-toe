main()
{
  asm { @"If you want to go first enter 1, otherwise 0\r\n" }
  // tricky way of getting an int.
  // pushes a zero on the stack
  // reads a number and the CR
  // then pops the CR and then
  // adds our zero and our number
  // putting them back on the stack
  // where 'new_move' used to be
  human_first = 0;
  asm { inn in pop add }

  if (human_first == 0)
  {
    asm { @"I go first and I'm X\r\n" }
  }
  else
  {
    asm { @"I go second and I'm X\r\n" }
  }

  board = 0;
  exp = 0;

  while (1)
  {
    // Computer goes first
    if (human_first == 0)
    {
      asm { @"\r\n\r\n\r\n" }
      move = get_computer_move(board);

      asm { @"I move to: " }
      __outn(move);
      asm { @"\r\n\r\n" }

      exp = exponent(move);
      board = 2*exp + board;
      print_board(board);

      check_for_win_or_tie(board);
    }
    else
    {
      print_board(board);
    }

    invalid_move = 1;
    while (invalid_move == 1)
    {
      asm { @"Move: " }
      // tricky way of getting an int.
      // pushes a zero on the stack
      // reads a number and the CR
      // then pops the CR and then
      // adds our zero and our number
      // putting them back on the stack
      // where 'new_move' used to be
      new_move = 0;
      asm { inn in pop add }

      move = new_move;
      exp = exponent(move);

      if (((board / exp) %3 != 0) || (move < 0) || (move > 8))
      {
        asm { @"ILLEGAL MOVE! Try again human!\r\n" }
      }
      else
      {
        invalid_move = 0;
      }
    }

    board = exp + board;

    check_for_win_or_tie(board);

    // Computer goes last
    if (human_first == 1)
    {
      asm { @"\r\n\r\n\r\n" }
      move = get_computer_move(board);

      asm { @"I move to: " }
      __outn(move);
      asm { @"\r\n\r\n" }

      exp = exponent(move);
      board = 2*exp + board;

      check_for_win_or_tie(board);
    }
  }
}

piece_value(board, position)
{
  return (board/exponent(position))%3;
}

check_for_win_or_tie(board)
{
  value_0 = piece_value(board, 0);
  value_1 = piece_value(board, 1);
  value_2 = piece_value(board, 2);
  value_3 = piece_value(board, 3);
  value_4 = piece_value(board, 4);
  value_5 = piece_value(board, 5);
  value_6 = piece_value(board, 6);
  value_7 = piece_value(board, 7);
  value_8 = piece_value(board, 8);

  if ((value_0 * value_1 * value_2 == 8) ||
      (value_3 * value_4 * value_5 == 8) ||
      (value_6 * value_7 * value_8 == 8) ||
      (value_0 * value_3 * value_6 == 8) ||
      (value_1 * value_4 * value_7 == 8) ||
      (value_2 * value_5 * value_8 == 8) ||
      (value_0 * value_4 * value_8 == 8) ||
      (value_2 * value_4 * value_6 == 8))
  {
    asm { @"\r\n**** I WIN! ****\r\n\r\n" }
    asm { halt }
  }

  if (value_0 != 0 && value_1 != 0 && value_2 != 0 &&
      value_3 != 0 && value_4 != 0 && value_5 != 0 &&
      value_6 != 0 && value_7 != 0 && value_8 != 0)
  {
    asm { @"\r\n**** TIE! ****\r\n\r\n" }
    asm { halt }
  }
}

print_board(board)
{
  print_piece(board, 0);
  asm { @" " }
  print_piece(board, 1);
  asm { @" " }
  print_piece(board, 2);
  asm { @"\r\n" }
  asm { @"\r\n" }

  print_piece(board, 3);
  asm { @" " }
  print_piece(board, 4);
  asm { @" " }
  print_piece(board, 5);
  asm { @"\r\n" }
  asm { @"\r\n" }

  print_piece(board, 6);
  asm { @" " }
  print_piece(board, 7);
  asm { @" " }
  print_piece(board, 8);
  asm { @"\r\n" }
  asm { @"\r\n" }
}

print_piece(board, position)
{
  piece = piece_value(board, position);

  if (piece == 0) { __outn(position); }
  if (piece == 1) { asm { @"O" } }
  if (piece == 2) { asm { @"X" } }
}

exponent(position)
{
  exp = 1;
  for(i=0; i < position; i++)
  {
    exp = exp *3;
  }

  return exp;
}

